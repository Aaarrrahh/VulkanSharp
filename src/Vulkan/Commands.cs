/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Vulkan
{
	internal static partial class Commands
	{
		public static List<LayerProperties> EnumerateInstanceLayerProperties ()
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkEnumerateInstanceLayerProperties (&pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);

				int size = Marshal.SizeOf (typeof (Interop.LayerProperties));
				var ptrpProperties = Marshal.AllocHGlobal ((int)(size * pPropertyCount));
				result = Interop.NativeMethods.vkEnumerateInstanceLayerProperties (&pPropertyCount, (Interop.LayerProperties*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				var list = new List<LayerProperties> ();
				for (int i = 0; i < pPropertyCount; i++) {
					var item = new LayerProperties ();
					item.m = &((Interop.LayerProperties*)ptrpProperties)[i];
					list.Add (item);
				}

				return list;
			}
		}

		public static List<ExtensionProperties> EnumerateInstanceExtensionProperties (string pLayerName)
		{
			Result result;
			unsafe {
				UInt32 pPropertyCount;
				result = Interop.NativeMethods.vkEnumerateInstanceExtensionProperties (pLayerName, &pPropertyCount, null);
				if (result != Result.Success)
					throw new ResultException (result);

				int size = Marshal.SizeOf (typeof (Interop.ExtensionProperties));
				var ptrpProperties = Marshal.AllocHGlobal ((int)(size * pPropertyCount));
				result = Interop.NativeMethods.vkEnumerateInstanceExtensionProperties (pLayerName, &pPropertyCount, (Interop.ExtensionProperties*)ptrpProperties);
				if (result != Result.Success)
					throw new ResultException (result);

				var list = new List<ExtensionProperties> ();
				for (int i = 0; i < pPropertyCount; i++) {
					var item = new ExtensionProperties ();
					item.m = &((Interop.ExtensionProperties*)ptrpProperties)[i];
					list.Add (item);
				}

				return list;
			}
		}
	}
}
