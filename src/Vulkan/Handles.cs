/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;

namespace Vulkan
{
	public partial class Instance
	{
		internal IntPtr m;

		public void Destroy (AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyInstance (this.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void EnumeratePhysicalDevices (out UInt32 PhysicalDeviceCount, out PhysicalDevice PhysicalDevices)
		{
			Result result;
			unsafe {
				PhysicalDevices = new PhysicalDevice ();

				fixed (UInt32* ptrPhysicalDeviceCount = &PhysicalDeviceCount) {
					fixed (IntPtr* ptrPhysicalDevices = &PhysicalDevices.m) {
						result = Interop.NativeMethods.vkEnumeratePhysicalDevices (this.m, ptrPhysicalDeviceCount, ptrPhysicalDevices);
					}
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public IntPtr GetProcAddr (string pName)
		{
			unsafe {
				return Interop.NativeMethods.vkGetInstanceProcAddr (this.m, pName);
			}
		}

		public void CreateDisplayPlaneSurfaceKHR (DisplaySurfaceCreateInfoKhr CreateInfo, AllocationCallbacks Allocator, out SurfaceKhr Surface)
		{
			Result result;
			unsafe {
				Surface = new SurfaceKhr ();

				fixed (UInt64* ptrSurface = &Surface.m) {
					result = Interop.NativeMethods.vkCreateDisplayPlaneSurfaceKHR (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrSurface);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroySurfaceKHR (SurfaceKhr surface, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySurfaceKHR (this.m, surface.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateDebugReportCallbackEXT (DebugReportCallbackCreateInfoExt CreateInfo, AllocationCallbacks Allocator, out DebugReportCallbackExt Callback)
		{
			Result result;
			unsafe {
				Callback = new DebugReportCallbackExt ();

				fixed (UInt64* ptrCallback = &Callback.m) {
					result = Interop.NativeMethods.vkCreateDebugReportCallbackEXT (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrCallback);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyDebugReportCallbackEXT (DebugReportCallbackExt callback, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDebugReportCallbackEXT (this.m, callback.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void DebugReportMessageEXT (DebugReportFlagsExt flags, DebugReportObjectTypeExt objectType, UInt64 @object, UIntPtr location, Int32 messageCode, string pLayerPrefix, string pMessage)
		{
			unsafe {
				Interop.NativeMethods.vkDebugReportMessageEXT (this.m, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);
			}
		}
	}

	public partial class PhysicalDevice
	{
		internal IntPtr m;

		public void GetProperties (out PhysicalDeviceProperties Properties)
		{
			unsafe {
				Properties = new PhysicalDeviceProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceProperties (this.m, Properties.m);
			}
		}

		public void GetQueueFamilyProperties (out UInt32 QueueFamilyPropertyCount, out QueueFamilyProperties QueueFamilyProperties)
		{
			unsafe {
				fixed (UInt32* ptrQueueFamilyPropertyCount = &QueueFamilyPropertyCount) {
					QueueFamilyProperties = new QueueFamilyProperties ();
					Interop.NativeMethods.vkGetPhysicalDeviceQueueFamilyProperties (this.m, ptrQueueFamilyPropertyCount, QueueFamilyProperties.m);
				}
			}
		}

		public void GetMemoryProperties (out PhysicalDeviceMemoryProperties MemoryProperties)
		{
			unsafe {
				MemoryProperties = new PhysicalDeviceMemoryProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceMemoryProperties (this.m, MemoryProperties.m);
			}
		}

		public void GetFeatures (out PhysicalDeviceFeatures Features)
		{
			unsafe {
				Features = new PhysicalDeviceFeatures ();
				Interop.NativeMethods.vkGetPhysicalDeviceFeatures (this.m, Features.m);
			}
		}

		public void GetFormatProperties (Format format, out FormatProperties FormatProperties)
		{
			unsafe {
				FormatProperties = new FormatProperties ();
				Interop.NativeMethods.vkGetPhysicalDeviceFormatProperties (this.m, format, FormatProperties.m);
			}
		}

		public void GetImageFormatProperties (Format format, ImageType type, ImageTiling tiling, ImageUsageFlags usage, ImageCreateFlags flags, out ImageFormatProperties ImageFormatProperties)
		{
			Result result;
			unsafe {
				ImageFormatProperties = new ImageFormatProperties ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceImageFormatProperties (this.m, format, type, tiling, usage, flags, ImageFormatProperties.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateDevice (DeviceCreateInfo CreateInfo, AllocationCallbacks Allocator, out Device Device)
		{
			Result result;
			unsafe {
				Device = new Device ();

				fixed (IntPtr* ptrDevice = &Device.m) {
					result = Interop.NativeMethods.vkCreateDevice (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrDevice);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void EnumerateDeviceLayerProperties (out UInt32 PropertyCount, out LayerProperties Properties)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrPropertyCount = &PropertyCount) {
					Properties = new LayerProperties ();
					result = Interop.NativeMethods.vkEnumerateDeviceLayerProperties (this.m, ptrPropertyCount, Properties.m);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void EnumerateDeviceExtensionProperties (string pLayerName, out UInt32 PropertyCount, out ExtensionProperties Properties)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrPropertyCount = &PropertyCount) {
					Properties = new ExtensionProperties ();
					result = Interop.NativeMethods.vkEnumerateDeviceExtensionProperties (this.m, pLayerName, ptrPropertyCount, Properties.m);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetSparseImageFormatProperties (Format format, ImageType type, SampleCountFlags samples, ImageUsageFlags usage, ImageTiling tiling, out UInt32 PropertyCount, out SparseImageFormatProperties Properties)
		{
			unsafe {
				fixed (UInt32* ptrPropertyCount = &PropertyCount) {
					Properties = new SparseImageFormatProperties ();
					Interop.NativeMethods.vkGetPhysicalDeviceSparseImageFormatProperties (this.m, format, type, samples, usage, tiling, ptrPropertyCount, Properties.m);
				}
			}
		}

		public void GetDisplayPropertiesKHR (out UInt32 PropertyCount, out DisplayPropertiesKhr Properties)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrPropertyCount = &PropertyCount) {
					Properties = new DisplayPropertiesKhr ();
					result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPropertiesKHR (this.m, ptrPropertyCount, Properties.m);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetDisplayPlanePropertiesKHR (out UInt32 PropertyCount, out DisplayPlanePropertiesKhr Properties)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrPropertyCount = &PropertyCount) {
					Properties = new DisplayPlanePropertiesKhr ();
					result = Interop.NativeMethods.vkGetPhysicalDeviceDisplayPlanePropertiesKHR (this.m, ptrPropertyCount, Properties.m);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetDisplayPlaneSupportedDisplaysKHR (UInt32 planeIndex, out UInt32 DisplayCount, out DisplayKhr Displays)
		{
			Result result;
			unsafe {
				Displays = new DisplayKhr ();

				fixed (UInt32* ptrDisplayCount = &DisplayCount) {
					fixed (UInt64* ptrDisplays = &Displays.m) {
						result = Interop.NativeMethods.vkGetDisplayPlaneSupportedDisplaysKHR (this.m, planeIndex, ptrDisplayCount, ptrDisplays);
					}
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetDisplayModePropertiesKHR (DisplayKhr display, out UInt32 PropertyCount, out DisplayModePropertiesKhr Properties)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrPropertyCount = &PropertyCount) {
					Properties = new DisplayModePropertiesKhr ();
					result = Interop.NativeMethods.vkGetDisplayModePropertiesKHR (this.m, display.m, ptrPropertyCount, Properties.m);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateDisplayModeKHR (DisplayKhr display, DisplayModeCreateInfoKhr CreateInfo, AllocationCallbacks Allocator, out DisplayModeKhr Mode)
		{
			Result result;
			unsafe {
				Mode = new DisplayModeKhr ();

				fixed (UInt64* ptrMode = &Mode.m) {
					result = Interop.NativeMethods.vkCreateDisplayModeKHR (this.m, display.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrMode);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetDisplayPlaneCapabilitiesKHR (DisplayModeKhr mode, UInt32 planeIndex, out DisplayPlaneCapabilitiesKhr Capabilities)
		{
			Result result;
			unsafe {
				Capabilities = new DisplayPlaneCapabilitiesKhr ();
				result = Interop.NativeMethods.vkGetDisplayPlaneCapabilitiesKHR (this.m, mode.m, planeIndex, Capabilities.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetSurfaceSupportKHR (UInt32 queueFamilyIndex, SurfaceKhr surface, out Bool32 Supported)
		{
			Result result;
			unsafe {
				fixed (Bool32* ptrSupported = &Supported) {
					result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceSupportKHR (this.m, queueFamilyIndex, surface.m, ptrSupported);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetSurfaceCapabilitiesKHR (SurfaceKhr surface, out SurfaceCapabilitiesKhr SurfaceCapabilities)
		{
			Result result;
			unsafe {
				SurfaceCapabilities = new SurfaceCapabilitiesKhr ();
				result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceCapabilitiesKHR (this.m, surface.m, SurfaceCapabilities.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetSurfaceFormatsKHR (SurfaceKhr surface, out UInt32 SurfaceFormatCount, out SurfaceFormatKhr SurfaceFormats)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrSurfaceFormatCount = &SurfaceFormatCount) {
					SurfaceFormats = new SurfaceFormatKhr ();
					result = Interop.NativeMethods.vkGetPhysicalDeviceSurfaceFormatsKHR (this.m, surface.m, ptrSurfaceFormatCount, SurfaceFormats.m);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetSurfacePresentModesKHR (SurfaceKhr surface, out UInt32 PresentModeCount, out PresentModeKhr PresentModes)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrPresentModeCount = &PresentModeCount) {
					fixed (PresentModeKhr* ptrPresentModes = &PresentModes) {
						result = Interop.NativeMethods.vkGetPhysicalDeviceSurfacePresentModesKHR (this.m, surface.m, ptrPresentModeCount, ptrPresentModes);
					}
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public Bool32 GetWin32PresentationSupportKHR (UInt32 queueFamilyIndex)
		{
			unsafe {
				return Interop.NativeMethods.vkGetPhysicalDeviceWin32PresentationSupportKHR (this.m, queueFamilyIndex);
			}
		}
	}

	public partial class Device
	{
		internal IntPtr m;

		public IntPtr GetProcAddr (string pName)
		{
			unsafe {
				return Interop.NativeMethods.vkGetDeviceProcAddr (this.m, pName);
			}
		}

		public void Destroy (AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDevice (this.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void GetQueue (UInt32 queueFamilyIndex, UInt32 queueIndex, out Queue Queue)
		{
			unsafe {
				Queue = new Queue ();

				fixed (IntPtr* ptrQueue = &Queue.m) {
					Interop.NativeMethods.vkGetDeviceQueue (this.m, queueFamilyIndex, queueIndex, ptrQueue);
				}
			}
		}

		public void WaitIdle ()
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkDeviceWaitIdle (this.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void AllocateMemory (MemoryAllocateInfo AllocateInfo, AllocationCallbacks Allocator, out DeviceMemory Memory)
		{
			Result result;
			unsafe {
				Memory = new DeviceMemory ();

				fixed (UInt64* ptrMemory = &Memory.m) {
					result = Interop.NativeMethods.vkAllocateMemory (this.m, AllocateInfo.m, Allocator != null ? Allocator.m : null, ptrMemory);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void FreeMemory (DeviceMemory memory, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkFreeMemory (this.m, memory.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void MapMemory (DeviceMemory memory, DeviceSize offset, DeviceSize size, UInt32 flags, out IntPtr pData)
		{
			Result result;
			unsafe {
				fixed (IntPtr* ptrpData = &pData) {
					result = Interop.NativeMethods.vkMapMemory (this.m, memory.m, offset, size, flags, ptrpData);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void UnmapMemory (DeviceMemory memory)
		{
			unsafe {
				Interop.NativeMethods.vkUnmapMemory (this.m, memory.m);
			}
		}

		public void FlushMappedMemoryRanges (UInt32 memoryRangeCount, MappedMemoryRange MemoryRanges)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkFlushMappedMemoryRanges (this.m, memoryRangeCount, MemoryRanges.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void InvalidateMappedMemoryRanges (UInt32 memoryRangeCount, MappedMemoryRange MemoryRanges)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkInvalidateMappedMemoryRanges (this.m, memoryRangeCount, MemoryRanges.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetMemoryCommitment (DeviceMemory memory, out DeviceSize CommittedMemoryInBytes)
		{
			unsafe {
				fixed (DeviceSize* ptrCommittedMemoryInBytes = &CommittedMemoryInBytes) {
					Interop.NativeMethods.vkGetDeviceMemoryCommitment (this.m, memory.m, ptrCommittedMemoryInBytes);
				}
			}
		}

		public void GetBufferMemoryRequirements (Buffer buffer, out MemoryRequirements MemoryRequirements)
		{
			unsafe {
				MemoryRequirements = new MemoryRequirements ();
				Interop.NativeMethods.vkGetBufferMemoryRequirements (this.m, buffer.m, MemoryRequirements.m);
			}
		}

		public void BindBufferMemory (Buffer buffer, DeviceMemory memory, DeviceSize memoryOffset)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindBufferMemory (this.m, buffer.m, memory.m, memoryOffset);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetImageMemoryRequirements (Image image, out MemoryRequirements MemoryRequirements)
		{
			unsafe {
				MemoryRequirements = new MemoryRequirements ();
				Interop.NativeMethods.vkGetImageMemoryRequirements (this.m, image.m, MemoryRequirements.m);
			}
		}

		public void BindImageMemory (Image image, DeviceMemory memory, DeviceSize memoryOffset)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBindImageMemory (this.m, image.m, memory.m, memoryOffset);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetImageSparseMemoryRequirements (Image image, out UInt32 SparseMemoryRequirementCount, out SparseImageMemoryRequirements SparseMemoryRequirements)
		{
			unsafe {
				fixed (UInt32* ptrSparseMemoryRequirementCount = &SparseMemoryRequirementCount) {
					SparseMemoryRequirements = new SparseImageMemoryRequirements ();
					Interop.NativeMethods.vkGetImageSparseMemoryRequirements (this.m, image.m, ptrSparseMemoryRequirementCount, SparseMemoryRequirements.m);
				}
			}
		}

		public void CreateFence (FenceCreateInfo CreateInfo, AllocationCallbacks Allocator, out Fence Fence)
		{
			Result result;
			unsafe {
				Fence = new Fence ();

				fixed (UInt64* ptrFence = &Fence.m) {
					result = Interop.NativeMethods.vkCreateFence (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrFence);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyFence (Fence fence, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyFence (this.m, fence.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void ResetFences (UInt32 fenceCount, Fence Fences)
		{
			Result result;
			unsafe {
				Fences = new Fence ();

				fixed (UInt64* ptrFences = &Fences.m) {
					result = Interop.NativeMethods.vkResetFences (this.m, fenceCount, ptrFences);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void GetFenceStatus (Fence fence)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkGetFenceStatus (this.m, fence.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void WaitForFences (UInt32 fenceCount, Fence Fences, Bool32 waitAll, UInt64 timeout)
		{
			Result result;
			unsafe {
				Fences = new Fence ();

				fixed (UInt64* ptrFences = &Fences.m) {
					result = Interop.NativeMethods.vkWaitForFences (this.m, fenceCount, ptrFences, waitAll, timeout);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateSemaphore (SemaphoreCreateInfo CreateInfo, AllocationCallbacks Allocator, out Semaphore Semaphore)
		{
			Result result;
			unsafe {
				Semaphore = new Semaphore ();

				fixed (UInt64* ptrSemaphore = &Semaphore.m) {
					result = Interop.NativeMethods.vkCreateSemaphore (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrSemaphore);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroySemaphore (Semaphore semaphore, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySemaphore (this.m, semaphore.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateEvent (EventCreateInfo CreateInfo, AllocationCallbacks Allocator, out Event Event)
		{
			Result result;
			unsafe {
				Event = new Event ();

				fixed (UInt64* ptrEvent = &Event.m) {
					result = Interop.NativeMethods.vkCreateEvent (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrEvent);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyEvent (Event @event, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyEvent (this.m, @event.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void GetEventStatus (Event @event)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkGetEventStatus (this.m, @event.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void SetEvent (Event @event)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkSetEvent (this.m, @event.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void ResetEvent (Event @event)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetEvent (this.m, @event.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateQueryPool (QueryPoolCreateInfo CreateInfo, AllocationCallbacks Allocator, out QueryPool QueryPool)
		{
			Result result;
			unsafe {
				QueryPool = new QueryPool ();

				fixed (UInt64* ptrQueryPool = &QueryPool.m) {
					result = Interop.NativeMethods.vkCreateQueryPool (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrQueryPool);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyQueryPool (QueryPool queryPool, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyQueryPool (this.m, queryPool.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void GetQueryPoolResults (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount, UIntPtr dataSize, IntPtr Data, DeviceSize stride, QueryResultFlags flags)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkGetQueryPoolResults (this.m, queryPool.m, firstQuery, queryCount, dataSize, Data, stride, flags);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateBuffer (BufferCreateInfo CreateInfo, AllocationCallbacks Allocator, out Buffer Buffer)
		{
			Result result;
			unsafe {
				Buffer = new Buffer ();

				fixed (UInt64* ptrBuffer = &Buffer.m) {
					result = Interop.NativeMethods.vkCreateBuffer (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrBuffer);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyBuffer (Buffer buffer, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyBuffer (this.m, buffer.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateBufferView (BufferViewCreateInfo CreateInfo, AllocationCallbacks Allocator, out BufferView View)
		{
			Result result;
			unsafe {
				View = new BufferView ();

				fixed (UInt64* ptrView = &View.m) {
					result = Interop.NativeMethods.vkCreateBufferView (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrView);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyBufferView (BufferView bufferView, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyBufferView (this.m, bufferView.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateImage (ImageCreateInfo CreateInfo, AllocationCallbacks Allocator, out Image Image)
		{
			Result result;
			unsafe {
				Image = new Image ();

				fixed (UInt64* ptrImage = &Image.m) {
					result = Interop.NativeMethods.vkCreateImage (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrImage);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyImage (Image image, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyImage (this.m, image.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void GetImageSubresourceLayout (Image image, ImageSubresource Subresource, out SubresourceLayout Layout)
		{
			unsafe {
				Layout = new SubresourceLayout ();
				Interop.NativeMethods.vkGetImageSubresourceLayout (this.m, image.m, Subresource.m, Layout.m);
			}
		}

		public void CreateImageView (ImageViewCreateInfo CreateInfo, AllocationCallbacks Allocator, out ImageView View)
		{
			Result result;
			unsafe {
				View = new ImageView ();

				fixed (UInt64* ptrView = &View.m) {
					result = Interop.NativeMethods.vkCreateImageView (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrView);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyImageView (ImageView imageView, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyImageView (this.m, imageView.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateShaderModule (ShaderModuleCreateInfo CreateInfo, AllocationCallbacks Allocator, out ShaderModule ShaderModule)
		{
			Result result;
			unsafe {
				ShaderModule = new ShaderModule ();

				fixed (UInt64* ptrShaderModule = &ShaderModule.m) {
					result = Interop.NativeMethods.vkCreateShaderModule (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrShaderModule);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyShaderModule (ShaderModule shaderModule, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyShaderModule (this.m, shaderModule.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreatePipelineCache (PipelineCacheCreateInfo CreateInfo, AllocationCallbacks Allocator, out PipelineCache PipelineCache)
		{
			Result result;
			unsafe {
				PipelineCache = new PipelineCache ();

				fixed (UInt64* ptrPipelineCache = &PipelineCache.m) {
					result = Interop.NativeMethods.vkCreatePipelineCache (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrPipelineCache);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyPipelineCache (PipelineCache pipelineCache, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyPipelineCache (this.m, pipelineCache.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void GetPipelineCacheData (PipelineCache pipelineCache, out UIntPtr DataSize, IntPtr Data)
		{
			Result result;
			unsafe {
				fixed (UIntPtr* ptrDataSize = &DataSize) {
					result = Interop.NativeMethods.vkGetPipelineCacheData (this.m, pipelineCache.m, ptrDataSize, Data);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void MergePipelineCaches (PipelineCache dstCache, UInt32 srcCacheCount, PipelineCache SrcCaches)
		{
			Result result;
			unsafe {
				SrcCaches = new PipelineCache ();

				fixed (UInt64* ptrSrcCaches = &SrcCaches.m) {
					result = Interop.NativeMethods.vkMergePipelineCaches (this.m, dstCache.m, srcCacheCount, ptrSrcCaches);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateGraphicsPipelines (PipelineCache pipelineCache, UInt32 createInfoCount, GraphicsPipelineCreateInfo CreateInfos, AllocationCallbacks Allocator, out Pipeline Pipelines)
		{
			Result result;
			unsafe {
				Pipelines = new Pipeline ();

				fixed (UInt64* ptrPipelines = &Pipelines.m) {
					result = Interop.NativeMethods.vkCreateGraphicsPipelines (this.m, pipelineCache.m, createInfoCount, CreateInfos.m, Allocator != null ? Allocator.m : null, ptrPipelines);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateComputePipelines (PipelineCache pipelineCache, UInt32 createInfoCount, ComputePipelineCreateInfo CreateInfos, AllocationCallbacks Allocator, out Pipeline Pipelines)
		{
			Result result;
			unsafe {
				Pipelines = new Pipeline ();

				fixed (UInt64* ptrPipelines = &Pipelines.m) {
					result = Interop.NativeMethods.vkCreateComputePipelines (this.m, pipelineCache.m, createInfoCount, CreateInfos.m, Allocator != null ? Allocator.m : null, ptrPipelines);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyPipeline (Pipeline pipeline, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyPipeline (this.m, pipeline.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreatePipelineLayout (PipelineLayoutCreateInfo CreateInfo, AllocationCallbacks Allocator, out PipelineLayout PipelineLayout)
		{
			Result result;
			unsafe {
				PipelineLayout = new PipelineLayout ();

				fixed (UInt64* ptrPipelineLayout = &PipelineLayout.m) {
					result = Interop.NativeMethods.vkCreatePipelineLayout (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrPipelineLayout);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyPipelineLayout (PipelineLayout pipelineLayout, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyPipelineLayout (this.m, pipelineLayout.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateSampler (SamplerCreateInfo CreateInfo, AllocationCallbacks Allocator, out Sampler Sampler)
		{
			Result result;
			unsafe {
				Sampler = new Sampler ();

				fixed (UInt64* ptrSampler = &Sampler.m) {
					result = Interop.NativeMethods.vkCreateSampler (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrSampler);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroySampler (Sampler sampler, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySampler (this.m, sampler.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateDescriptorSetLayout (DescriptorSetLayoutCreateInfo CreateInfo, AllocationCallbacks Allocator, out DescriptorSetLayout SetLayout)
		{
			Result result;
			unsafe {
				SetLayout = new DescriptorSetLayout ();

				fixed (UInt64* ptrSetLayout = &SetLayout.m) {
					result = Interop.NativeMethods.vkCreateDescriptorSetLayout (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrSetLayout);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyDescriptorSetLayout (DescriptorSetLayout descriptorSetLayout, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDescriptorSetLayout (this.m, descriptorSetLayout.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateDescriptorPool (DescriptorPoolCreateInfo CreateInfo, AllocationCallbacks Allocator, out DescriptorPool DescriptorPool)
		{
			Result result;
			unsafe {
				DescriptorPool = new DescriptorPool ();

				fixed (UInt64* ptrDescriptorPool = &DescriptorPool.m) {
					result = Interop.NativeMethods.vkCreateDescriptorPool (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrDescriptorPool);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyDescriptorPool (DescriptorPool descriptorPool, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyDescriptorPool (this.m, descriptorPool.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void ResetDescriptorPool (DescriptorPool descriptorPool, UInt32 flags)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetDescriptorPool (this.m, descriptorPool.m, flags);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void AllocateDescriptorSets (DescriptorSetAllocateInfo AllocateInfo, out DescriptorSet DescriptorSets)
		{
			Result result;
			unsafe {
				DescriptorSets = new DescriptorSet ();

				fixed (UInt64* ptrDescriptorSets = &DescriptorSets.m) {
					result = Interop.NativeMethods.vkAllocateDescriptorSets (this.m, AllocateInfo.m, ptrDescriptorSets);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void FreeDescriptorSets (DescriptorPool descriptorPool, UInt32 descriptorSetCount, DescriptorSet DescriptorSets)
		{
			Result result;
			unsafe {
				DescriptorSets = new DescriptorSet ();

				fixed (UInt64* ptrDescriptorSets = &DescriptorSets.m) {
					result = Interop.NativeMethods.vkFreeDescriptorSets (this.m, descriptorPool.m, descriptorSetCount, ptrDescriptorSets);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void UpdateDescriptorSets (UInt32 descriptorWriteCount, WriteDescriptorSet DescriptorWrites, UInt32 descriptorCopyCount, CopyDescriptorSet DescriptorCopies)
		{
			unsafe {
				Interop.NativeMethods.vkUpdateDescriptorSets (this.m, descriptorWriteCount, DescriptorWrites.m, descriptorCopyCount, DescriptorCopies.m);
			}
		}

		public void CreateFramebuffer (FramebufferCreateInfo CreateInfo, AllocationCallbacks Allocator, out Framebuffer Framebuffer)
		{
			Result result;
			unsafe {
				Framebuffer = new Framebuffer ();

				fixed (UInt64* ptrFramebuffer = &Framebuffer.m) {
					result = Interop.NativeMethods.vkCreateFramebuffer (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrFramebuffer);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyFramebuffer (Framebuffer framebuffer, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyFramebuffer (this.m, framebuffer.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void CreateRenderPass (RenderPassCreateInfo CreateInfo, AllocationCallbacks Allocator, out RenderPass RenderPass)
		{
			Result result;
			unsafe {
				RenderPass = new RenderPass ();

				fixed (UInt64* ptrRenderPass = &RenderPass.m) {
					result = Interop.NativeMethods.vkCreateRenderPass (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrRenderPass);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyRenderPass (RenderPass renderPass, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyRenderPass (this.m, renderPass.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void GetRenderAreaGranularity (RenderPass renderPass, out Extent2D Granularity)
		{
			unsafe {
				Granularity = new Extent2D ();
				Interop.NativeMethods.vkGetRenderAreaGranularity (this.m, renderPass.m, Granularity.m);
			}
		}

		public void CreateCommandPool (CommandPoolCreateInfo CreateInfo, AllocationCallbacks Allocator, out CommandPool CommandPool)
		{
			Result result;
			unsafe {
				CommandPool = new CommandPool ();

				fixed (UInt64* ptrCommandPool = &CommandPool.m) {
					result = Interop.NativeMethods.vkCreateCommandPool (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrCommandPool);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroyCommandPool (CommandPool commandPool, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroyCommandPool (this.m, commandPool.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void ResetCommandPool (CommandPool commandPool, CommandPoolResetFlags flags)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetCommandPool (this.m, commandPool.m, flags);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void AllocateCommandBuffers (CommandBufferAllocateInfo AllocateInfo, out CommandBuffer CommandBuffers)
		{
			Result result;
			unsafe {
				CommandBuffers = new CommandBuffer ();

				fixed (IntPtr* ptrCommandBuffers = &CommandBuffers.m) {
					result = Interop.NativeMethods.vkAllocateCommandBuffers (this.m, AllocateInfo.m, ptrCommandBuffers);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void FreeCommandBuffers (CommandPool commandPool, UInt32 commandBufferCount, CommandBuffer CommandBuffers)
		{
			unsafe {
				CommandBuffers = new CommandBuffer ();

				fixed (IntPtr* ptrCommandBuffers = &CommandBuffers.m) {
					Interop.NativeMethods.vkFreeCommandBuffers (this.m, commandPool.m, commandBufferCount, ptrCommandBuffers);
				}
			}
		}

		public void CreateSharedSwapchainsKHR (UInt32 swapchainCount, SwapchainCreateInfoKhr CreateInfos, AllocationCallbacks Allocator, out SwapchainKhr Swapchains)
		{
			Result result;
			unsafe {
				Swapchains = new SwapchainKhr ();

				fixed (UInt64* ptrSwapchains = &Swapchains.m) {
					result = Interop.NativeMethods.vkCreateSharedSwapchainsKHR (this.m, swapchainCount, CreateInfos.m, Allocator != null ? Allocator.m : null, ptrSwapchains);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CreateSwapchainKHR (SwapchainCreateInfoKhr CreateInfo, AllocationCallbacks Allocator, out SwapchainKhr Swapchain)
		{
			Result result;
			unsafe {
				Swapchain = new SwapchainKhr ();

				fixed (UInt64* ptrSwapchain = &Swapchain.m) {
					result = Interop.NativeMethods.vkCreateSwapchainKHR (this.m, CreateInfo.m, Allocator != null ? Allocator.m : null, ptrSwapchain);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void DestroySwapchainKHR (SwapchainKhr swapchain, AllocationCallbacks Allocator)
		{
			unsafe {
				Interop.NativeMethods.vkDestroySwapchainKHR (this.m, swapchain.m, Allocator != null ? Allocator.m : null);
			}
		}

		public void GetSwapchainImagesKHR (SwapchainKhr swapchain, out UInt32 SwapchainImageCount, out Image SwapchainImages)
		{
			Result result;
			unsafe {
				SwapchainImages = new Image ();

				fixed (UInt32* ptrSwapchainImageCount = &SwapchainImageCount) {
					fixed (UInt64* ptrSwapchainImages = &SwapchainImages.m) {
						result = Interop.NativeMethods.vkGetSwapchainImagesKHR (this.m, swapchain.m, ptrSwapchainImageCount, ptrSwapchainImages);
					}
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void AcquireNextImageKHR (SwapchainKhr swapchain, UInt64 timeout, Semaphore semaphore, Fence fence, out UInt32 ImageIndex)
		{
			Result result;
			unsafe {
				fixed (UInt32* ptrImageIndex = &ImageIndex) {
					result = Interop.NativeMethods.vkAcquireNextImageKHR (this.m, swapchain.m, timeout, semaphore.m, fence.m, ptrImageIndex);
				}
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}
	}

	public partial class Queue
	{
		internal IntPtr m;

		public void Submit (UInt32 submitCount, SubmitInfo Submits, Fence fence)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueueSubmit (this.m, submitCount, Submits.m, fence.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void WaitIdle ()
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueueWaitIdle (this.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void BindSparse (UInt32 bindInfoCount, BindSparseInfo BindInfo, Fence fence)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueueBindSparse (this.m, bindInfoCount, BindInfo.m, fence.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void PresentKHR (PresentInfoKhr PresentInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkQueuePresentKHR (this.m, PresentInfo.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}
	}

	public partial class CommandBuffer
	{
		internal IntPtr m;

		public void Begin (CommandBufferBeginInfo BeginInfo)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkBeginCommandBuffer (this.m, BeginInfo.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void End ()
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkEndCommandBuffer (this.m);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void Reset (CommandBufferResetFlags flags)
		{
			Result result;
			unsafe {
				result = Interop.NativeMethods.vkResetCommandBuffer (this.m, flags);
			}
			if (result != Result.Success)
				throw new ResultException (result);
		}

		public void CmdBindPipeline (PipelineBindPoint pipelineBindPoint, Pipeline pipeline)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBindPipeline (this.m, pipelineBindPoint, pipeline.m);
			}
		}

		public void CmdSetViewport (UInt32 firstViewport, UInt32 viewportCount, Viewport Viewports)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetViewport (this.m, firstViewport, viewportCount, Viewports.m);
			}
		}

		public void CmdSetScissor (UInt32 firstScissor, UInt32 scissorCount, Rect2D Scissors)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetScissor (this.m, firstScissor, scissorCount, Scissors.m);
			}
		}

		public void CmdSetLineWidth (float lineWidth)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetLineWidth (this.m, lineWidth);
			}
		}

		public void CmdSetDepthBias (float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDepthBias (this.m, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
			}
		}

		public void CmdSetBlendConstants (float blendConstants)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetBlendConstants (this.m, blendConstants);
			}
		}

		public void CmdSetDepthBounds (float minDepthBounds, float maxDepthBounds)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetDepthBounds (this.m, minDepthBounds, maxDepthBounds);
			}
		}

		public void CmdSetStencilCompareMask (StencilFaceFlags faceMask, UInt32 compareMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilCompareMask (this.m, faceMask, compareMask);
			}
		}

		public void CmdSetStencilWriteMask (StencilFaceFlags faceMask, UInt32 writeMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilWriteMask (this.m, faceMask, writeMask);
			}
		}

		public void CmdSetStencilReference (StencilFaceFlags faceMask, UInt32 reference)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetStencilReference (this.m, faceMask, reference);
			}
		}

		public void CmdBindDescriptorSets (PipelineBindPoint pipelineBindPoint, PipelineLayout layout, UInt32 firstSet, UInt32 descriptorSetCount, DescriptorSet DescriptorSets, UInt32 dynamicOffsetCount, UInt32 DynamicOffsets)
		{
			unsafe {
				DescriptorSets = new DescriptorSet ();

				fixed (UInt64* ptrDescriptorSets = &DescriptorSets.m) {
					Interop.NativeMethods.vkCmdBindDescriptorSets (this.m, pipelineBindPoint, layout.m, firstSet, descriptorSetCount, ptrDescriptorSets, dynamicOffsetCount, &DynamicOffsets);
				}
			}
		}

		public void CmdBindIndexBuffer (Buffer buffer, DeviceSize offset, IndexType indexType)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBindIndexBuffer (this.m, buffer.m, offset, indexType);
			}
		}

		public void CmdBindVertexBuffers (UInt32 firstBinding, UInt32 bindingCount, Buffer Buffers, DeviceSize Offsets)
		{
			unsafe {
				Buffers = new Buffer ();

				fixed (UInt64* ptrBuffers = &Buffers.m) {
					Interop.NativeMethods.vkCmdBindVertexBuffers (this.m, firstBinding, bindingCount, ptrBuffers, &Offsets);
				}
			}
		}

		public void CmdDraw (UInt32 vertexCount, UInt32 instanceCount, UInt32 firstVertex, UInt32 firstInstance)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDraw (this.m, vertexCount, instanceCount, firstVertex, firstInstance);
			}
		}

		public void CmdDrawIndexed (UInt32 indexCount, UInt32 instanceCount, UInt32 firstIndex, Int32 vertexOffset, UInt32 firstInstance)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexed (this.m, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
			}
		}

		public void CmdDrawIndirect (Buffer buffer, DeviceSize offset, UInt32 drawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndirect (this.m, buffer.m, offset, drawCount, stride);
			}
		}

		public void CmdDrawIndexedIndirect (Buffer buffer, DeviceSize offset, UInt32 drawCount, UInt32 stride)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDrawIndexedIndirect (this.m, buffer.m, offset, drawCount, stride);
			}
		}

		public void CmdDispatch (UInt32 x, UInt32 y, UInt32 z)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatch (this.m, x, y, z);
			}
		}

		public void CmdDispatchIndirect (Buffer buffer, DeviceSize offset)
		{
			unsafe {
				Interop.NativeMethods.vkCmdDispatchIndirect (this.m, buffer.m, offset);
			}
		}

		public void CmdCopyBuffer (Buffer srcBuffer, Buffer dstBuffer, UInt32 regionCount, BufferCopy Regions)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyBuffer (this.m, srcBuffer.m, dstBuffer.m, regionCount, Regions.m);
			}
		}

		public void CmdCopyImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, UInt32 regionCount, ImageCopy Regions)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyImage (this.m, srcImage.m, srcImageLayout, dstImage.m, dstImageLayout, regionCount, Regions.m);
			}
		}

		public void CmdBlitImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, UInt32 regionCount, ImageBlit Regions, Filter filter)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBlitImage (this.m, srcImage.m, srcImageLayout, dstImage.m, dstImageLayout, regionCount, Regions.m, filter);
			}
		}

		public void CmdCopyBufferToImage (Buffer srcBuffer, Image dstImage, ImageLayout dstImageLayout, UInt32 regionCount, BufferImageCopy Regions)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyBufferToImage (this.m, srcBuffer.m, dstImage.m, dstImageLayout, regionCount, Regions.m);
			}
		}

		public void CmdCopyImageToBuffer (Image srcImage, ImageLayout srcImageLayout, Buffer dstBuffer, UInt32 regionCount, BufferImageCopy Regions)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyImageToBuffer (this.m, srcImage.m, srcImageLayout, dstBuffer.m, regionCount, Regions.m);
			}
		}

		public void CmdUpdateBuffer (Buffer dstBuffer, DeviceSize dstOffset, DeviceSize dataSize, UInt32 Data)
		{
			unsafe {
				Interop.NativeMethods.vkCmdUpdateBuffer (this.m, dstBuffer.m, dstOffset, dataSize, &Data);
			}
		}

		public void CmdFillBuffer (Buffer dstBuffer, DeviceSize dstOffset, DeviceSize size, UInt32 data)
		{
			unsafe {
				Interop.NativeMethods.vkCmdFillBuffer (this.m, dstBuffer.m, dstOffset, size, data);
			}
		}

		public void CmdClearColorImage (Image image, ImageLayout imageLayout, ClearColorValue Color, UInt32 rangeCount, ImageSubresourceRange Ranges)
		{
			unsafe {
				Interop.NativeMethods.vkCmdClearColorImage (this.m, image.m, imageLayout, Color.m, rangeCount, Ranges.m);
			}
		}

		public void CmdClearDepthStencilImage (Image image, ImageLayout imageLayout, ClearDepthStencilValue DepthStencil, UInt32 rangeCount, ImageSubresourceRange Ranges)
		{
			unsafe {
				Interop.NativeMethods.vkCmdClearDepthStencilImage (this.m, image.m, imageLayout, DepthStencil.m, rangeCount, Ranges.m);
			}
		}

		public void CmdClearAttachments (UInt32 attachmentCount, ClearAttachment Attachments, UInt32 rectCount, ClearRect Rects)
		{
			unsafe {
				Interop.NativeMethods.vkCmdClearAttachments (this.m, attachmentCount, Attachments.m, rectCount, Rects.m);
			}
		}

		public void CmdResolveImage (Image srcImage, ImageLayout srcImageLayout, Image dstImage, ImageLayout dstImageLayout, UInt32 regionCount, ImageResolve Regions)
		{
			unsafe {
				Interop.NativeMethods.vkCmdResolveImage (this.m, srcImage.m, srcImageLayout, dstImage.m, dstImageLayout, regionCount, Regions.m);
			}
		}

		public void CmdSetEvent (Event @event, PipelineStageFlags stageMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdSetEvent (this.m, @event.m, stageMask);
			}
		}

		public void CmdResetEvent (Event @event, PipelineStageFlags stageMask)
		{
			unsafe {
				Interop.NativeMethods.vkCmdResetEvent (this.m, @event.m, stageMask);
			}
		}

		public void CmdWaitEvents (UInt32 eventCount, Event Events, PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, UInt32 memoryBarrierCount, MemoryBarrier MemoryBarriers, UInt32 bufferMemoryBarrierCount, BufferMemoryBarrier BufferMemoryBarriers, UInt32 imageMemoryBarrierCount, ImageMemoryBarrier ImageMemoryBarriers)
		{
			unsafe {
				Events = new Event ();

				fixed (UInt64* ptrEvents = &Events.m) {
					Interop.NativeMethods.vkCmdWaitEvents (this.m, eventCount, ptrEvents, srcStageMask, dstStageMask, memoryBarrierCount, MemoryBarriers.m, bufferMemoryBarrierCount, BufferMemoryBarriers.m, imageMemoryBarrierCount, ImageMemoryBarriers.m);
				}
			}
		}

		public void CmdPipelineBarrier (PipelineStageFlags srcStageMask, PipelineStageFlags dstStageMask, DependencyFlags dependencyFlags, UInt32 memoryBarrierCount, MemoryBarrier MemoryBarriers, UInt32 bufferMemoryBarrierCount, BufferMemoryBarrier BufferMemoryBarriers, UInt32 imageMemoryBarrierCount, ImageMemoryBarrier ImageMemoryBarriers)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPipelineBarrier (this.m, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, MemoryBarriers.m, bufferMemoryBarrierCount, BufferMemoryBarriers.m, imageMemoryBarrierCount, ImageMemoryBarriers.m);
			}
		}

		public void CmdBeginQuery (QueryPool queryPool, UInt32 query, QueryControlFlags flags)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginQuery (this.m, queryPool.m, query, flags);
			}
		}

		public void CmdEndQuery (QueryPool queryPool, UInt32 query)
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndQuery (this.m, queryPool.m, query);
			}
		}

		public void CmdResetQueryPool (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount)
		{
			unsafe {
				Interop.NativeMethods.vkCmdResetQueryPool (this.m, queryPool.m, firstQuery, queryCount);
			}
		}

		public void CmdWriteTimestamp (PipelineStageFlags pipelineStage, QueryPool queryPool, UInt32 query)
		{
			unsafe {
				Interop.NativeMethods.vkCmdWriteTimestamp (this.m, pipelineStage, queryPool.m, query);
			}
		}

		public void CmdCopyQueryPoolResults (QueryPool queryPool, UInt32 firstQuery, UInt32 queryCount, Buffer dstBuffer, DeviceSize dstOffset, DeviceSize stride, QueryResultFlags flags)
		{
			unsafe {
				Interop.NativeMethods.vkCmdCopyQueryPoolResults (this.m, queryPool.m, firstQuery, queryCount, dstBuffer.m, dstOffset, stride, flags);
			}
		}

		public void CmdPushConstants (PipelineLayout layout, ShaderStageFlags stageFlags, UInt32 offset, UInt32 size, IntPtr Values)
		{
			unsafe {
				Interop.NativeMethods.vkCmdPushConstants (this.m, layout.m, stageFlags, offset, size, Values);
			}
		}

		public void CmdBeginRenderPass (RenderPassBeginInfo RenderPassBegin, SubpassContents contents)
		{
			unsafe {
				Interop.NativeMethods.vkCmdBeginRenderPass (this.m, RenderPassBegin.m, contents);
			}
		}

		public void CmdNextSubpass (SubpassContents contents)
		{
			unsafe {
				Interop.NativeMethods.vkCmdNextSubpass (this.m, contents);
			}
		}

		public void CmdEndRenderPass ()
		{
			unsafe {
				Interop.NativeMethods.vkCmdEndRenderPass (this.m);
			}
		}

		public void CmdExecuteCommands (UInt32 commandBufferCount, CommandBuffer CommandBuffers)
		{
			unsafe {
				CommandBuffers = new CommandBuffer ();

				fixed (IntPtr* ptrCommandBuffers = &CommandBuffers.m) {
					Interop.NativeMethods.vkCmdExecuteCommands (this.m, commandBufferCount, ptrCommandBuffers);
				}
			}
		}
	}

	public partial class DeviceMemory
	{
		internal UInt64 m;
	}

	public partial class CommandPool
	{
		internal UInt64 m;
	}

	public partial class Buffer
	{
		internal UInt64 m;
	}

	public partial class BufferView
	{
		internal UInt64 m;
	}

	public partial class Image
	{
		internal UInt64 m;
	}

	public partial class ImageView
	{
		internal UInt64 m;
	}

	public partial class ShaderModule
	{
		internal UInt64 m;
	}

	public partial class Pipeline
	{
		internal UInt64 m;
	}

	public partial class PipelineLayout
	{
		internal UInt64 m;
	}

	public partial class Sampler
	{
		internal UInt64 m;
	}

	public partial class DescriptorSet
	{
		internal UInt64 m;
	}

	public partial class DescriptorSetLayout
	{
		internal UInt64 m;
	}

	public partial class DescriptorPool
	{
		internal UInt64 m;
	}

	public partial class Fence
	{
		internal UInt64 m;
	}

	public partial class Semaphore
	{
		internal UInt64 m;
	}

	public partial class Event
	{
		internal UInt64 m;
	}

	public partial class QueryPool
	{
		internal UInt64 m;
	}

	public partial class Framebuffer
	{
		internal UInt64 m;
	}

	public partial class RenderPass
	{
		internal UInt64 m;
	}

	public partial class PipelineCache
	{
		internal UInt64 m;
	}

	public partial class DisplayKhr
	{
		internal UInt64 m;
	}

	public partial class DisplayModeKhr
	{
		internal UInt64 m;
	}

	public partial class SurfaceKhr
	{
		internal UInt64 m;
	}

	public partial class SwapchainKhr
	{
		internal UInt64 m;
	}

	public partial class DebugReportCallbackExt
	{
		internal UInt64 m;
	}
}
